const Redis = require('ioredis');

let redis = null;

// Ch·ªâ k·∫øt n·ªëi Redis khi c√≥ config v√† kh√¥ng ph·∫£i test environment
if (process.env.REDIS_HOST && process.env.NODE_ENV !== 'test') {
    try {
        redis = new Redis({
            // Th√¥ng tin k·∫øt n·ªëi c∆° b·∫£n
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT) || 6379,
            password: process.env.REDIS_PASSWORD || undefined,
            
            // Database number (Redis c√≥ 16 DB t·ª´ 0-15, m·∫∑c ƒë·ªãnh d√πng DB 0)
            db: parseInt(process.env.REDIS_DB) || 0,
            
            // C·∫•u h√¨nh connection pooling
            connectTimeout: 60000,      // 60 gi√¢y timeout khi k·∫øt n·ªëi
            lazyConnect: true,          // Ch·ªâ k·∫øt n·ªëi khi c·∫ßn thi·∫øt
            maxRetriesPerRequest: 3,    // Retry t·ªëi ƒëa 3 l·∫ßn cho m·ªói command
            
            // Retry strategy - c√°ch x·ª≠ l√Ω khi m·∫•t k·∫øt n·ªëi
            retryStrategy: (times) => {
                const delay = Math.min(times * 50, 2000); // TƒÉng d·∫ßn delay, t·ªëi ƒëa 2s
                console.warn(`Redis retry attempt ${times}, waiting ${delay}ms`);
                return delay;
            },
            
            // Reconnect on fail - t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i
            reconnectOnError: (err) => {
                const targetError = 'READONLY';
                return err.message.includes(targetError);
            }
        });

        // Event listeners ƒë·ªÉ monitor Redis connection
        redis.on('connect', () => {
            console.log('‚úÖ Redis connected successfully');
        });

        redis.on('ready', () => {
            console.log('üöÄ Redis ready to receive commands');
        });

        redis.on('error', (err) => {
            console.error('‚ùå Redis connection error:', err.message);
            // Kh√¥ng crash app, ch·ªâ log l·ªói ƒë·ªÉ fallback gracefully
        });

        redis.on('close', () => {
            console.warn('‚ö†Ô∏è Redis connection closed');
        });

        redis.on('reconnecting', () => {
            console.log('üîÑ Redis reconnecting...');
        });

    } catch (error) {
        console.error('Redis initialization failed:', error.message);
        redis = null; // Fallback to null n·∫øu kh√¥ng th·ªÉ init
    }
} else {
    console.log('‚ÑπÔ∏è Redis not configured or in test mode - using in-memory fallback');
}

// Export redis instance (c√≥ th·ªÉ l√† null)
module.exports = redis;